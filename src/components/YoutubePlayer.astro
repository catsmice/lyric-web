---
const { vid, lyrics } = Astro.props;

// Serialize the lyrics data into a JSON string
const lyricsJson = JSON.stringify(lyrics);
---
<!-- Embed the lyrics data in a hidden div or a script tag -->
<div id="lyrics-data" style="display: none;">{lyricsJson}</div>


<!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
<div id="player" class="w-full max-w-md p-4 flex justify-center" data-vid={vid}></div>
<div id="lyrics" class="w-full max-w-md p-4 mx-4"></div> 

<script>
    // Retrieve the lyrics data from the hidden div
    var lyricsJson = document.getElementById('lyrics-data').innerText;
    var lyrics = JSON.parse(lyricsJson);

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      
    // 3. This function creates an <iframe> (and YouTube player) after the API code downloads.
    var player;
    var updateLyricsInterval;
    
    window.onYouTubeIframeAPIReady = function() {
        var videoId = document.getElementById('player').getAttribute('data-vid');

        player = new YT.Player('player', {
            height: '130', //270
            width: '375',
            videoId: videoId,
            playerVars: {
                'playsinline': 1
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    function displayLyric(lyric) {
        return `<div class="lyric-block">
                    <p class="original-lyric">${lyric.original}</p>
                    <p class="translated-lyric">${lyric.translation}</p>
                </div>`;
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        //event.target.playVideo();
        displayInitialLyrics(); // Call this function to display the initial lyrics
    }

    function displayInitialLyrics() {
        // Display the first 5 lyrics initially
        let lyricsHtml = '';
        for (let i = 0; i < Math.min(5, lyrics.length); i++) {
            lyricsHtml += `<div id="lyric-${i}">${displayLyric(lyrics[i])}</div>`;
        }
        document.getElementById('lyrics').innerHTML = lyricsHtml;
    }

    var done = false;
      
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING) {
            updateLyricsInterval = setInterval(updateLyrics, 500); // Update every second
        } else {
            clearInterval(updateLyricsInterval);
        }
    }

    function updateLyrics() {
        const currentTime = Math.floor(player.getCurrentTime());
        let currentLyricIndex = -1;

        // Find the index of the current lyric
        for (let i = 0; i < lyrics.length; i++) {
            if (lyrics[i].time <= currentTime) {
                currentLyricIndex = i;
            } else {
                break;
            }
        }

        if (currentLyricIndex !== -1) {
            let lyricsHtml = '';
            let start = Math.max(currentLyricIndex - 2, 0);
            let end = Math.min(currentLyricIndex + 3, lyrics.length);

            // Adjust start and end indices to always show 5 lyrics if possible
            if (end - start < 5) {
                if (end === lyrics.length) {
                    // If at the end, shift start backward
                    start = Math.max(end - 5, 0);
                } else if (start === 0) {
                    // If at the beginning, shift end forward
                    end = Math.min(5, lyrics.length);
                }
            }

            for (let i = start; i < end; i++) {
                let lyricClass = i === currentLyricIndex ? 'current-lyric' : '';
                lyricsHtml += `<div class="${lyricClass}" id="lyric-${i}">${displayLyric(lyrics[i])}</div>`;
            }

            const lyricsContainer = document.getElementById('lyrics');
            lyricsContainer.innerHTML = lyricsHtml;

            // Animate scrolling to the current lyric
            const currentLyricElement = document.getElementById(`lyric-${currentLyricIndex}`);
            if (currentLyricElement) {
                currentLyricElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }
    }
</script>    